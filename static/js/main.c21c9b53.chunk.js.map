{"version":3,"sources":["components/AddComment/AddComment.module.css","logo.svg","components/Comment/Comment.module.css","axios.js","store/actions.js","components/Comment/Replies.js","components/AddComment/AddComment.js","components/Comment/Comment.js","containers/Comments.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","saveData","res","type","comments","replies","props","className","map","comment","key","id","author","date","commentAdded","AddComment","useState","commentText","setCommentText","styles","addComment","textarea","onChange","event","target","value","publishButton","onClick","replyState","commentId","Comment","reply","setReplyState","commentHeader","commentDate","replyButton","Replies","Comments","this","onComponentMount","Date","newComment","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","post","then","response","data","some","e","getTime","onAddedComment","filter","forEach","c","i","c2","findReplies","push","style","paddingRight","publishCommentHandler","bind","Component","connect","state","dispatch","onFetchData","get","App","src","logo","alt","Boolean","window","location","hostname","match","initialState","reducer","action","concat","store","createStore","applyMiddleware","next","console","log","result","getState","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,SAAW,6BAA6B,cAAgB,oC,mBCDtHD,EAAOC,QAAU,IAA0B,kC,gGCC3CD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,YAAc,6BAA6B,cAAgB,iC,0KCK5IC,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,kECYAC,EAAW,SAAEC,GACtB,MAAO,CACHC,KAfkB,aAgBlBC,SAAUF,I,uBCEHG,EAjBC,SAACC,GAAD,OACf,yBAAKC,UAAU,WAEbD,EAAMD,QAAQG,KAAI,SAAAC,GAAO,OACvB,kBAAC,EAAD,CACAC,IAAKD,EAAQE,GACbA,GAAIF,EAAQE,GACZC,OAAQH,EAAQG,OAChBH,QAASA,EAAQA,QACjBI,KAAMJ,EAAQI,KACdR,QAASI,EAAQJ,QACjBS,aAAcR,EAAMQ,oB,iBCSVC,EApBI,SAACT,GAAW,IAAD,EACOU,mBAAS,IADhB,mBACxBC,EADwB,KACXC,EADW,KAG7B,OACC,yBAAKX,UAAWY,IAAOC,YACtB,8BACCb,UAAWY,IAAOE,SAClBC,SAAU,SAACC,GAAD,OAAWL,EAAeK,EAAMC,OAAOC,QACjDA,MAAOR,IACR,4BACCV,UAAWY,IAAOO,cAClBC,QAAS,WACNrB,EAAMsB,YAAYtB,EAAMsB,YAAW,GACtCtB,EAAMQ,aAAaG,EAAaX,EAAMuB,WACtCX,EAAe,MALhB,aC0BYY,EAjCC,SAACxB,GAAW,IAAD,EACKU,oBAAS,GADd,mBACnBe,EADmB,KACZC,EADY,KAG1B,OACC,yBAAKzB,UAAWY,IAAOV,SACtB,yBAAKF,UAAWY,IAAOc,eACtB,6BAAM3B,EAAMM,QACZ,yBAAKL,UAAWY,IAAOe,aAAc5B,EAAMO,OAE5C,yBAAKN,UAAU,QACbD,EAAMG,SAER,6BACC,4BACCF,UAAWY,IAAOgB,YAClBR,QAAS,kBAAMK,GAAeD,KAF/B,SAICA,EACC,kBAAC,EAAD,CACCF,UAAWvB,EAAMK,GACjBG,aAAcR,EAAMQ,aACpBc,WAAYI,IAEd,MAGF,kBAACI,EAAD,CACC/B,QAASC,EAAMD,QACfS,aAAcR,EAAMQ,iBCzBlBuB,E,4LAQEC,KAAKhC,MAAMiC,qB,4CAGItB,EAAaY,GAAW,IAAD,OACtChB,EAAO,IAAI2B,KAEXC,EAAa,CAClB,OAAU,gBACL,QAAWxB,EACX,KAAQJ,EAAK6B,cACV,KAAO7B,EAAK8B,WAAa,GACzB,IAAM9B,EAAK+B,UACX,IAAM/B,EAAKgC,WACX,IAAMhC,EAAKiC,aACX,IAAMjC,EAAKkC,aACd,UAAalB,GAGnB/B,EAAMkD,KAAK,YAAaP,GACtBQ,MAAK,SAAAC,GACO,IAAMzC,EAAUyC,EAASC,KAGtB,EAAK7C,MAAMF,SAASgD,MAAK,SAAAC,GAAC,OAAIA,EAAE1C,KAAOF,EAAQE,QACjDF,EAAQE,IAAK,IAAI6B,MAAOc,WAGzB,EAAKhD,MAAMiD,eAAe9C,Q,kCAI7BoB,GAAW,IAAD,OACjBzB,EAAW,GAMf,OALAkC,KAAKhC,MAAMF,SAASoD,QAAO,SAAAH,GAAC,OAAIA,EAAExB,YAAcA,GAAawB,EAAE1C,KAAOkB,KAAW4B,SAAQ,SAACC,EAAGC,GAC5F,IAAIC,EAAE,eAAOF,GACbE,EAAE,QAAc,EAAKC,YAAYH,EAAE/C,IACnCP,EAAS0D,KAAKF,MAERxD,I,+BAGC,IAAD,OACHA,EAAWkC,KAAKuB,YAAY,MAChC,OACC,yBAAKE,MAAO,CAACC,aAAc,SAC1B,2CACA,kBAAC,EAAD,CACCnC,UAAW,KACXf,aAAcwB,KAAK2B,sBAAsBC,KAAK5B,QAE/ClC,EAASI,KAAI,SAAAC,GAAO,OACnB,kBAAC,EAAD,CACCC,IAAKD,EAAQE,GACbA,GAAIF,EAAQE,GACZC,OAAQH,EAAQG,OAChBH,QAASA,EAAQA,QACjBI,KAAMJ,EAAQI,KACdR,QAASI,EAAQJ,QACjBS,aAAc,EAAKmD,sBAAsBC,KAAK,a,GAlE7BC,aAyFRC,eAdS,SAAAC,GACpB,MAAO,CACNjE,SAAUiE,EAAMjE,aAIM,SAAAkE,GACvB,MAAO,CACHC,YAAa,SAACnE,GAAD,OAAckE,EAAS,CAACnE,KJzFnB,aIyFiDC,SAAUA,KAC7EmC,iBAAkB,kBAAM+B,GJtFrB,SAAAA,GACNxE,EAAM0E,IAAK,aACHvB,MAAM,SAAAC,GACH,IAAM9C,EAAW8C,EAASC,KAC1BmB,EAASrE,EAASG,WImF1BmD,eAAgB,SAAC9C,EAASoB,GAAV,OAAwByC,EAAS,CAACnE,KJ1F/B,cI0F8DM,QAASA,EAASoB,UAAWA,QAIvGuC,CAA6C/B,GCjF7CoC,MAXf,WACE,OACE,yBAAKlE,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKmE,IAAKC,IAAMpE,UAAU,WAAWqE,IAAI,UAE3C,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAe,CACjB9E,SAAU,IAoBC+E,EAjBC,WAAqC,IAAnCd,EAAkC,uDAA1Ba,EAAcE,EAAY,uCAChD,OAASA,EAAOjF,MACZ,IPPkB,aOQd,OAAO,eACAkE,EADP,CAEIjE,SAAUgF,EAAOhF,WAEzB,IPXmB,cOYf,OAAO,eACAiE,EADP,CAEIjE,SAAUiE,EAAMjE,SAASiF,OAAQD,EAAO3E,WAEhD,QACI,OAAO4D,I,QCGbiB,EAAQC,YAAYJ,EAASK,aAXpB,SAAAF,GACX,OAAO,SAAAG,GACH,OAAO,SAAAL,GACHM,QAAQC,IAAI,2BAA4BP,GACxC,IAAMQ,EAASH,EAAKL,GAEpB,OADAM,QAAQC,IAAI,0BAA2BL,EAAMO,YACtCD,MAKwCE,MAE3DC,IAASC,OAAO,kBAAC,IAAD,CAAUV,MAAOA,GAAO,kBAAC,EAAD,OAAoBW,SAASC,eAAe,SF0G9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,MAAK,SAAAqD,GACjCA,EAAaC,kB","file":"static/js/main.c21c9b53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addComment\":\"AddComment_addComment__3AEk0\",\"textarea\":\"AddComment_textarea__2PpAX\",\"publishButton\":\"AddComment_publishButton__2c1Ij\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Comment_comment__2SmJa\",\"replyButton\":\"Comment_replyButton__tQpg7\",\"commentDate\":\"Comment_commentDate__1hP4X\",\"commentHeader\":\"Comment_commentHeader__3HIPZ\"};","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://my-json-server.typicode.com/VictorVQZ/comments-thread'\n});\n\nexport default instance;","import axios from '../axios';\n\nexport const FETCH_DATA = 'FETCH_DATA';\nexport const ADD_COMMENT = 'ADD_COMMENT';\n\nexport const getData = ( res ) => {\n    return dispatch => {\n    \taxios.get( '/comments' )\n            .then( response => {\n                const comments = response.data;\n                dispatch(saveData(comments))\n            });\n    }\n};\n\nexport const saveData = ( res ) => {\n    return {\n        type: FETCH_DATA,\n        comments: res\n    };\n};","import React from 'react';\nimport Comment from './Comment';\n\nconst replies = (props) => (\n\t<div className=\"replies\">\n\t\t{\n\t\t\tprops.replies.map(comment => (\n\t\t\t\t <Comment \n\t\t\t\t\tkey={comment.id}\n\t\t\t\t\tid={comment.id}\n\t\t\t\t\tauthor={comment.author}\n\t\t\t\t\tcomment={comment.comment}\n\t\t\t\t\tdate={comment.date}\n\t\t\t\t\treplies={comment.replies}\n\t\t\t\t\tcommentAdded={props.commentAdded} />\n\t\t\t))\n\t\t}\n\t</div>\n);\n\nexport default replies;","import React, { useState } from 'react';\nimport styles from './AddComment.module.css';\n\nconst AddComment = (props) => {\n\tvar [commentText, setCommentText] = useState('');\n\n\treturn (\n\t\t<div className={styles.addComment}>\n\t\t\t<textarea \n\t\t\t\tclassName={styles.textarea}\n\t\t\t\tonChange={(event) => setCommentText(event.target.value)} \n\t\t\t\tvalue={commentText}></textarea>\n\t\t\t<button \n\t\t\t\tclassName={styles.publishButton}\n\t\t\t\tonClick={() => {\n\t\t\t\tif(props.replyState) props.replyState(false);\t\t\t\n\t\t\t\tprops.commentAdded(commentText, props.commentId);\n\t\t\t\tsetCommentText('');\n\t\t\t}}>Publish</button>\n\t\t</div>\n\t)\n};\n\nexport default AddComment;","import React, { useState } from 'react';\nimport styles from './Comment.module.css';\nimport Replies from './Replies';\nimport AddComment from '../AddComment/AddComment';\n\nconst Comment = (props) => {\n\tconst [reply, setReplyState] = useState(false);\n\n\treturn (\n\t\t<div className={styles.comment}>\n\t\t\t<div className={styles.commentHeader}>\n\t\t\t\t<div>{props.author}</div>\n\t\t\t\t<div className={styles.commentDate}>{props.date}</div>\n\t\t\t</div>\n\t\t\t<div className=\"body\">\n\t\t\t\t{props.comment}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<button \n\t\t\t\t\tclassName={styles.replyButton}\n\t\t\t\t\tonClick={() => setReplyState(!reply)}>Reply</button>\n\t\t\t\t{\n\t\t\t\t\treply ? \n\t\t\t\t\t\t<AddComment \n\t\t\t\t\t\t\tcommentId={props.id}\n\t\t\t\t\t\t\tcommentAdded={props.commentAdded}\n\t\t\t\t\t\t\treplyState={setReplyState} /> \n\t\t\t\t\t: \n\t\t\t\t\tnull \n\t\t\t\t}\n\t\t\t</div>\n\t\t\t<Replies \n\t\t\t\treplies={props.replies}\n\t\t\t\tcommentAdded={props.commentAdded} />\n\t\t</div>\n\t);\n};\n\nexport default Comment;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../store/actions';\nimport axios from '../axios';\n\nimport Comment from '../components/Comment/Comment';\nimport AddComment from '../components/AddComment/AddComment';\n\nclass Comments extends Component{\n\n\tcomponentDidMount(){\n\t\t/*axios.get( '/comments' )\n            .then( response => {\n                const comments = response.data;\n                this.props.onFetchData(comments);\n            });*/\n        this.props.onComponentMount();\n\t}\n\n\tpublishCommentHandler(commentText, commentId){\n\t\tconst date = new Date();\n\n\t\tconst newComment = {\n\t\t\t\"author\": \"user@test.com\",\n\t      \t\"comment\": commentText,\n\t      \t\"date\": date.getFullYear() \n\t\t      \t+ '-' + (date.getMonth() + 1) \n\t\t      \t+ '-' + date.getDate() \n\t\t      \t+ 'T' + date.getHours() \n\t\t      \t+ ':' + date.getMinutes()\n\t\t      \t+ ':' + date.getSeconds(),\n\t      \t\"commentId\": commentId\n\t\t};\n\n\t\taxios.post('/comments', newComment)\n\t\t\t.then(response => {\n                const comment = response.data;\n\n                // Prevent duplicated ids due to storage not persistent\n                if(this.props.comments.some(e => e.id === comment.id)){\n                \tcomment.id = new Date().getTime();\n                }\n\n                this.props.onAddedComment(comment);\n            });\n\t}\n\n\tfindReplies(commentId){\n\t\tvar comments = [];\n\t\tthis.props.comments.filter(e => e.commentId === commentId && e.id !== commentId).forEach((c, i) => {\n\t\t\tvar c2 = {...c};\n\t\t\tc2['replies'] = this.findReplies(c.id);\t\t\t\t\t\t\n\t\t\tcomments.push(c2);\n\t\t});\n\t\treturn comments;\n\t}\n\n\trender(){\n\t\tvar comments = this.findReplies(null);\t\t\n\t\treturn (\n\t\t\t<div style={{paddingRight: '10px'}}>\n\t\t\t\t<h4>Add comment</h4>\n\t\t\t\t<AddComment \n\t\t\t\t\tcommentId={null}\n\t\t\t\t\tcommentAdded={this.publishCommentHandler.bind(this)} />\n\t\t\t{\n\t\t\t\tcomments.map(comment => (\n\t\t\t\t\t<Comment \n\t\t\t\t\t\tkey={comment.id}\n\t\t\t\t\t\tid={comment.id}\n\t\t\t\t\t\tauthor={comment.author}\n\t\t\t\t\t\tcomment={comment.comment}\n\t\t\t\t\t\tdate={comment.date}\n\t\t\t\t\t\treplies={comment.replies}\n\t\t\t\t\t\tcommentAdded={this.publishCommentHandler.bind(this)} />\n\t\t\t\t))\n\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n\t\n}\n\nconst mapStateToProps = state => {\n    return {\n    \tcomments: state.comments\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchData: (comments) => dispatch({type: actionTypes.FETCH_DATA, comments: comments}),\n        onComponentMount: () => dispatch(actionTypes.getData()),\n        onAddedComment: (comment, commentId) => dispatch({type: actionTypes.ADD_COMMENT, comment: comment, commentId: commentId})\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Comments from './containers/Comments';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Comments />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\n\n\nconst initialState = {\n    comments: []\n};\n\nconst reducer = ( state = initialState, action ) => {\n    switch ( action.type ) {\n        case actionTypes.FETCH_DATA:\n            return {\n                ...state,\n                comments: action.comments\n            };\n        case actionTypes.ADD_COMMENT:            \n            return {\n                ...state,\n                comments: state.comments.concat( action.comment )\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducer';\n\nimport thunk from 'redux-thunk';\n\nconst logger = store => {\n    return next => {\n        return action => {\n            console.log('[Middleware] Dispatching', action);\n            const result = next(action);\n            console.log('[Middleware] next state', store.getState());\n            return result;\n        }\n    }\n};\n\nconst store = createStore(reducer, applyMiddleware(logger, thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}